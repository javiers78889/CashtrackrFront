import ProgressBar from '@/components/Budget/ProgressBar'
import AddExpenseButton from '@/components/expenses/AddExpenseButton'
import ExpenseMenu from '@/components/expenses/ExpenseMenu'
import Amount from '@/components/ui/Amount'
import ModalContainer from '@/components/ui/ModalContainer'
import { getToken } from '@/src/auth/token'
import { ExpenseAPIResponseSchema } from '@/src/schemas'
import { getBudget } from '@/src/services'
import { formatCurrency, formatDate } from '@/src/utils'
import { Metadata } from 'next'
import { Params } from 'next/dist/shared/lib/router/utils/route-matcher'
import React from 'react'

export async function generateMetadata({ params }: { params: Params }): Promise<Metadata> {
    const { id } = params
    const budget = await getBudget({ id })
    return {
        title: `Cashtrackr - ${budget[0].name}`,
        description: "Generated by create next app",
    }
}
const getBudgets = async (id: number) => {
    const token = getToken()

    const url = `${process.env.API_URL}/budgets/${id}`


    const req = await fetch(url, {
        headers: {
            'authorization': `Bearer ${token}`
        },
        next: { tags: ['expenses'] } // Debe ir dentro del objeto de configuraciÃ³n
    });



    const json = await req.json()
    const validar = ExpenseAPIResponseSchema.parse(json)
    return validar

}
export default async function BudgetsDetailsPage({ params }: { params: Params }) {

    const { id } = params

    const budget = await getBudgets(+id)
    const totalSpent = budget.expenses.reduce((total, expense) => +expense.amount + total, 0)
    const Disponible = +budget.amount - totalSpent

    const porcentaje = ((totalSpent / +budget.amount) * 100).toFixed(2)


    return (
        <>



            <div className='flex justify-between items-center'>
                <div>
                    <h1 className="font-black text-4xl text-purple-950">{budget.name} {formatCurrency(+budget.amount)}</h1>
                    <p className="text-xl font-bold">Administra tus {''} <span className="text-amber-500">gastos</span></p>
                </div>
                <AddExpenseButton />
            </div>
            <div className='grid grid-flow-cols-1 md:grid-cols-2 mt-10'>
                <ProgressBar porcentaje={+porcentaje} />
                <div className='flex flex-col gap-5 justify-center items-center md:justify-start'>

                    <Amount
                        label='Presupuesto'
                        amount={+budget.amount}
                    />
                    <Amount
                        label='Disponible'
                        amount={Disponible}
                    />
                    <Amount
                        label='Gastado'
                        amount={totalSpent}
                    />


                </div>
            </div>

            <ul role="list" className="divide-y divide-gray-300 border shadow-lg mt-10 ">
                {!budget.expenses.length ? (<p className='text-center py-5'>No hay gastos</p>) : budget.expenses.map((expense) => (
                    <>


                        <li key={expense.id} className="flex justify-between gap-x-6 p-5">
                            <div className="flex min-w-0 gap-x-4">
                                <div className="min-w-0 flex-auto space-y-2">
                                    <p className="text-2xl font-semibold text-gray-900">
                                        {expense.name}
                                    </p>
                                    <p className="text-xl font-bold text-amber-500">
                                        {formatCurrency(expense.amount)}
                                    </p>
                                    <p className='text-gray-500  text-sm'>
                                        {formatDate(expense.updatedAt)}
                                    </p>
                                </div>
                            </div>
                            <ExpenseMenu expenseId={expense.id} />
                        </li>
                    </>
                ))}
            </ul>
            <ModalContainer />
        </>
    )
}
